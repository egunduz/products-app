import { createSlice, createSelector, createAsyncThunk, } from '@reduxjs/toolkit';
import productApi from '../../api/productApi';
import { SortingCode } from '../../_constants';

const DEFAULT_PAGE_SIZE = 16;
const DEFAULT_SORTING = SortingCode.LowToHeigh;

const initialState = {
  pageIndex: 1,
  totalCount: 200,
  pageSize: DEFAULT_PAGE_SIZE,
  fetchedItems: [],
  filters: {
    types: [],
    tags: [],
    brands: [],
  },
  sortings: DEFAULT_SORTING,
  status: 'idle',
  lastQuery: "",
  apiError: "",
};

// The function below is called a thunk and allows us to perform async logic.
const fetchAsync = createAsyncThunk(
  'product/fetchAsync',
  async (filter, thunkAPI) => {
    const response = await productApi.getProducts(filter);
    const totalCount = response.headers.get('X-Total-Count');
    const items = await response.json();

    // The value we return becomes the `fulfilled` action payload
    return { totalCount, items };
  }
);

/**
 * redux toolkit api for Product store
 */
const productSlice = createSlice({
  name: 'products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPageIndex: (state, action) => {
      state.pageIndex = action.payload;
    },
    setTotalCount: (state, action) => {
      state.totalCount = action.payload;
    },
    setBrandFilter: (state, action) => {
      state.filters.brands = action.payload;
    },
    setTypesFilter: (state, action) => {
      state.filters.types = action.payload;
    },
    setSorting: (state, action) => {
      state.sortings = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.totalCount = action.payload.totalCount;
        state.fetchedItems = action.payload.items;
      })
  },
});

/** those actions will be exported */
export const { addItem, removeItem, updateItem, setPageIndex, setBrandFilter, setTypesFilter, setSorting, } = productSlice.actions;

/** inorder to memoise items selection */
export const selectProducts = (state) => state.products.fetchedItems;

export const selectPageSize = (state) => state.products.pageSize;

export const selectPageIndex = (state) => state.products.pageIndex;

export const selectTotalCount = (state) => state.products.totalCount;

export const getLastQuery = (state) => state.products.lastQuery;

const createQuery = (pageIndex, limit, state) => {
  const {filters, sortings, } = state.products;

  return {
    page: pageIndex,
    limit: limit,
    sorting: sortings,
    itemTypes: filters.types,
    manufacturers: filters.brands
  }
}

export const fetchNextPage = (pageIndex, pageSize) => (dispatch, getState) => {
  const state = getState();
  const filter = createQuery(pageIndex, pageSize, state);
  dispatch(fetchAsync(filter));
};

// export reducer
export default productSlice.reducer;